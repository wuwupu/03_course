1. 数据库
    存放数据的仓库
    关系型数据库
        Oracle,MySQL,sqlserver,DB2
    特点:
        1. 数据库中有表,表中包含行(数据/记录)和列(字段)
            数据之间是有关系的,不是散的数据
        2. 保存的数据与字段的顺序必须保持一致
        3. 数据库提供的SQL语句方便我们对数据库的管理
          增:向数据库中增加数据/插入数据
            insert into 表名 values (v1,v2,v3,...);
          删:从数据库中删除数据
            delete from 表名
          改:修改数据
            update 表名 set 属性/字段=值
          查:查询数据
            select * from 表名
        4. 数据库向后台(java,python,c#,c++,php,nodejs)提供了接口
      缺点:
        1. 字段使操作不够灵活
        2. 数据不灵活
            同一个字段,数据的类型必须保持一致
            某些时候,必须要填入数据,不能不填

2. NoSQL
    Not only SQL
                    非关系型数据库        关系型数据库
    数据库中保存的是:   集合                  表格
          数据:   集合中的每一条数据为文档   表格中的数据为                                    行(记录)

    关系型数据库中有表,表中有记录
    非关系型数据库中有集合,集合中有文档


3.MongoDB
  1) 安装
      默认安装
      配置环境变量
        右击我的电脑--属性--高级系统设置
        系统环境变量--path
        ***path中原有的东西一个都不能删改***
        将光标放入变量值里面,向右移动到最后
        添加一个英文状态下的分号 ; 
        找到安装MongoDB的路径
        C:\Program Files\MongoDB\Server\3.0\bin
        将其粘贴在 ; 的后面
        一路确定

        重新打开命令窗口,输入mongo
        "目标计算机积极拒绝"

  2) 常用命令
    2.1 启动数据库服务
        mongod --dbpath 目标文件夹路径
        (mongod单独使用,会使用默认的文件夹C:/data/db)
        当最后一行出现on port 27017则表示数据库服务启动成功
        注意:
            此时,该命令窗口不可以关闭
            需要重新打开新的命令窗口来操作后续指令
    2.2 连接数据库服务
        mongo
        重新打开一个命令窗口,输入上面的指令
        连接成功后,会进入mongo环境,可以使用mongo命令
        前面的2个命令(mongod,mongo),是在windows环境下执行的
    2.3 查看当前服务器中有哪些数据库
        show dbs
    2.4 创建/使用某个数据库
        use 数据库名称
        当数据库存在,直接使用,如果不存在,则创建,后使用
    2.5 查看当前所在的数据库名称
        db
    2.6 创建集合并向其中插入一条数据(文档)
        db.集合名.insert(json对象)
        db.student.insert({id:1,name:"zs",age:23});

      将之前的2个命令窗口全部退出
      重新打开命令窗口,一个启动数据库服务,一个用于连接
      查看有哪些数据库,使用web1807数据库,向其中student
      集合中添加3条数据
      {id:1,name:'张三'}
      {id:2,name:"李四",age:23}
      {id:3,name:"jack",sex:"M"}
    
    2.7 查询数据库中某一个集合的数据
        db.集合名.find()
        查看所有数据,也可以写成db.集合名.find({})
        {}表示查询的条件,不写,或者空对象,表示无条件查询
        db.集合名.find({age:20})
        查询age为20的所有人的信息
    2.8 查看当前数据库中有哪些集合
        show collections
    2.9 删除集合中的数据
        db.集合名.remove(json条件)
        json条件必须添加,如果是无条件删除,则为{}
        db.集合名.remove({id:1})删除id值为1的数据
    2.10 修改数据
        db.集合名.update(json1,json2)
        json1: 表示修改数据的条件
        json2: 表示修改的数据

        将id值为2的人的年龄修改为32岁
        db.student.update({id:2},{age:32});
        PS:上面的写法不是修改age属性的值,而是将该数据替换了原来数据库中的数据
        将{age:23}替换数据库中id值为2的数据

        修改数据,而不是替换数据的方式:
        db.student.update({id:2},{$set:{age:32}});
        PS: 当提交匹配到多条时,只会修改第一个匹配到的数据
            当匹配到了数据并修改之后,就不会再去匹配下去
            即:只能修改一条数据
        批量修改:
          添加第三个参数: {multi:true}
          db.student.update(json1,json2,{multi:true});

    2.11 导入数据(在Windows环境下使用)
        mongoimport -d 数据库名称 -c 集合名称 文件路径

        mongoimport --db 数据库名称 --collection 集合名称 --drop --file 文件路径
        将文件中的数据导入到指定集合中去,如果集合已经存在,则先删除原有集合,然后再创建新的集合,导入数据

    2.12 删除集合
        db.集合名.drop()
        删除teacher集合
          db.teacher.drop()
    2.13 删除数据库库)
        db.dropDatabase()
        删除之后,输入db显示的,依然是被删除的数据库
        相当于刚连接数据库之后,使用use创建一个新的数据库

  3) 关系
    3.1 大于 $gt (great than)
    3.2 大于等于 $gte (great than or equal)
    3.3 小于 $lt (less than)
    3.4 小于等于 $lte (less than or equal)
    3.5 等于 $eq (equal)
    3.6 不等于 $ne (not equal)

      eg:
        查询年龄等于20岁的学生的信息
        db.stu.find({age:20})
        db.stu.find({age:{$eq:20} })
        查询年龄大于等于20岁的信息
        db.stu.find({age:{$gte:20} })
        查询年龄不是20岁的信息
        db.stu.find({age:{$ne:20} })

    3.7 与 并且 $and
        eg:
          查询年龄为20,并且性别为男 的信息
          db.stu.find({age:20,sex:"M"})
          查询年龄为44岁且id为101的信息
          db.stu.find({age:44,id:101})
          db.stu.find({ $and:[{age:44},{id:101}] })
    3.8 或 或者 $or
          查询年龄为48岁,或者id为105的信息
          db.stu.find({ $or:[{age:48},{id:105}] })
    3.9 非 取反 $not
          查询年龄不小于44岁的信息
          db.stu.find({age:{$not:{$lt:44}} })
          如果$not后面跟具体的值,需要使用$eq包装下
          db.stu.find({age:{$not:{$eq:44}} })
    3.10 nor 既不是,也不是
          查询年龄不是44岁,id不是104的信息
          db.stu.find({$nor:[{age:44},{id:104}]})


